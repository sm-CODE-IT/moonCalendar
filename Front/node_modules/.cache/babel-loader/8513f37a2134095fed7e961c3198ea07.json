{"ast":null,"code":"var _jsxFileName = \"C:\\\\STUDY\\\\moonCalendar\\\\Front\\\\src\\\\components\\\\ContentEditor.js\";\nimport React, { Component, useContext } from \"react\";\n/* components */\n\nimport MyHeader from \"./MyHeader\";\nimport { EditorState, ContentState, convertFromRaw } from \"draft-js\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { stateToHTML } from \"draft-js-export-html\";\nimport { stateFromHTML } from \"draft-js-import-html\";\nimport { DiaryDispatchContext } from \"../App\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction uploadImageCallBack(file) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", \"https://api.imgur.com/3/image\");\n    xhr.setRequestHeader(\"Authorization\", \"Client-ID XXXXX\");\n    const data = new FormData();\n    data.append(\"image\", file);\n    xhr.send(data);\n    xhr.addEventListener(\"load\", () => {\n      const response = JSON.parse(xhr.responseText);\n      resolve(response);\n    });\n    xhr.addEventListener(\"error\", () => {\n      const error = JSON.parse(xhr.responseText);\n      reject(error);\n    });\n  });\n}\n\nclass ContentEditor extends Component {\n  constructor(props) {\n    super(props); // 작동은 하지만 처음에 edit을 누르면 기존 텍스트가 나오지 않음\n    // if (!this.props.isEdit) {\n    //   this.state = {\n    //     editorState: EditorState.createEmpty(),\n    //   };\n    // } else {\n    //   // console.log(\"contentEditor\", this.props.content);\n    //   this.state = {\n    //     // editorState: EditorState.createWithContent(\n    //     //   ContentState.stateFromHTML(content)\n    //     // editorState: EditorState.createWithContent(\n    //     //   ContentState.createFromText(this.props.content)\n    //     editorState: EditorState.createWithContent(\n    //       stateFromHTML(this.props.content)\n    //     ),\n    //   };\n    // }\n\n    this.onEditorStateChange = editorState => {\n      // console.log(editorState)\n      this.setState({\n        editorState\n      });\n    };\n\n    this.convertedHTML = () => {\n      let contentState = stateToHTML(this.state.editorState.getCurrentContent());\n      this.props.setContent(contentState);\n    };\n\n    let _editorState;\n\n    if (this.props.content.trim() !== \"'\") {\n      const processedHTML = DraftPasteProcessor.processHTML(this.props.content);\n      const contentState = ContentState.createFromBlockArray(processedHTML); //move focus to the end.\n\n      _editorState = EditorState.createWithContent(contentState);\n      _editorState = EditorState.moveFocusToEnd(_editorState);\n    } else {\n      _editorState = EditorState.createEmpty();\n    }\n\n    this.state = {\n      editorState: _editorState\n    };\n  }\n\n  render() {\n    const {\n      editorState\n    } = this.state;\n    let contentState = stateToHTML(this.state.editorState.getCurrentContent());\n    this.props.setContent(contentState); // const currentBlockKey = this.state.editorState.getSelection().getStartKey();\n    // const currentBlockIndex = this.state.editorState\n    //   .getCurrentContent()\n    //   .getBlockMap()\n    //   .keySeq()\n    //   .findIndex((k) => k === currentBlockKey);\n    // console.log(currentBlockIndex);\n    // console.log(this.props.content);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EditorContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor\",\n        children: /*#__PURE__*/_jsxDEV(Editor, {\n          editorState: editorState,\n          onEditorStateChange: this.onEditorStateChange,\n          placeholder: \"content\",\n          toolbar: {\n            options: [\"blockType\", \"fontSize\", \"inline\", \"list\", \"textAlign\", \"history\", \"image\"],\n            list: {\n              inDropdown: true\n            },\n            textAlign: {\n              inDropdown: false\n            },\n            link: {\n              inDropdown: true\n            },\n            history: {\n              inDropdown: false\n            },\n            image: {\n              uploadCallback: uploadImageCallBack,\n              alt: {\n                present: true,\n                mandatory: true\n              }\n            }\n          },\n          wrapperClassName: \"wrapper_class\",\n          editorClassName: \"editor_class\",\n          toolbarClassName: \"toolbar_class\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ContentEditor;","map":{"version":3,"names":["React","Component","useContext","MyHeader","EditorState","ContentState","convertFromRaw","Editor","stateToHTML","stateFromHTML","DiaryDispatchContext","useNavigate","uploadImageCallBack","file","Promise","resolve","reject","xhr","XMLHttpRequest","open","setRequestHeader","data","FormData","append","send","addEventListener","response","JSON","parse","responseText","error","ContentEditor","constructor","props","onEditorStateChange","editorState","setState","convertedHTML","contentState","state","getCurrentContent","setContent","content","trim","processedHTML","DraftPasteProcessor","processHTML","createFromBlockArray","createWithContent","moveFocusToEnd","createEmpty","render","options","list","inDropdown","textAlign","link","history","image","uploadCallback","alt","present","mandatory"],"sources":["C:/STUDY/moonCalendar/Front/src/components/ContentEditor.js"],"sourcesContent":["import React, { Component, useContext } from \"react\";\r\n/* components */\r\nimport MyHeader from \"./MyHeader\";\r\nimport { EditorState, ContentState, convertFromRaw } from \"draft-js\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport { stateToHTML } from \"draft-js-export-html\";\r\nimport { stateFromHTML } from \"draft-js-import-html\";\r\nimport { DiaryDispatchContext } from \"../App\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction uploadImageCallBack(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open(\"POST\", \"https://api.imgur.com/3/image\");\r\n    xhr.setRequestHeader(\"Authorization\", \"Client-ID XXXXX\");\r\n    const data = new FormData();\r\n    data.append(\"image\", file);\r\n    xhr.send(data);\r\n    xhr.addEventListener(\"load\", () => {\r\n      const response = JSON.parse(xhr.responseText);\r\n      resolve(response);\r\n    });\r\n    xhr.addEventListener(\"error\", () => {\r\n      const error = JSON.parse(xhr.responseText);\r\n      reject(error);\r\n    });\r\n  });\r\n}\r\n\r\nclass ContentEditor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // 작동은 하지만 처음에 edit을 누르면 기존 텍스트가 나오지 않음\r\n    // if (!this.props.isEdit) {\r\n    //   this.state = {\r\n    //     editorState: EditorState.createEmpty(),\r\n    //   };\r\n    // } else {\r\n    //   // console.log(\"contentEditor\", this.props.content);\r\n    //   this.state = {\r\n    //     // editorState: EditorState.createWithContent(\r\n    //     //   ContentState.stateFromHTML(content)\r\n    //     // editorState: EditorState.createWithContent(\r\n    //     //   ContentState.createFromText(this.props.content)\r\n    //     editorState: EditorState.createWithContent(\r\n    //       stateFromHTML(this.props.content)\r\n    //     ),\r\n    //   };\r\n    // }\r\n    let editorState;\r\n    if (this.props.content.trim() !== \"'\") {\r\n      const processedHTML = DraftPasteProcessor.processHTML(this.props.content);\r\n      const contentState = ContentState.createFromBlockArray(processedHTML);\r\n      //move focus to the end.\r\n      editorState = EditorState.createWithContent(contentState);\r\n      editorState = EditorState.moveFocusToEnd(editorState);\r\n    } else {\r\n      editorState = EditorState.createEmpty();\r\n    }\r\n\r\n    this.state = {\r\n      editorState: editorState,\r\n    };\r\n  }\r\n\r\n  onEditorStateChange: Function = (editorState) => {\r\n    // console.log(editorState)\r\n    this.setState({\r\n      editorState,\r\n    });\r\n  };\r\n\r\n  // default\r\n  // exportHTML = () => {\r\n  //   this.setState({\r\n  //     convertedContent: stateToHTML(this.state.editorState.getCurrentContent()),\r\n  //   });\r\n  // };\r\n\r\n  // updateHTML = (e) => {\r\n  //   e.preventDefault();\r\n  //   this.setState({ convertedContent: e.target.value });\r\n  // };\r\n\r\n  // importHTML = () => {\r\n  //   const { editorState } = this.state;\r\n  //   this.onChange(\r\n  //     EditorState.push(editorState, stateFromHTML(this.state.convertedContent))\r\n  //   );\r\n  // };\r\n\r\n  // useEffect =\r\n  //   (() => {\r\n  //     let contentState;\r\n  //     if (!this.props.isEdit) {\r\n  //       console.log(this.props.content);\r\n  //       contentState = stateToHTML(this.state.editorState.getCurrentContent());\r\n  //     } else {\r\n  //       contentState = stateToHTML(this.state.editorState.getCurrentContent());\r\n  //     }\r\n  //     this.props.setContent(contentState);\r\n  //   },\r\n  //   [this.props.isEdit]);\r\n\r\n  convertedHTML = () => {\r\n    let contentState = stateToHTML(this.state.editorState.getCurrentContent());\r\n    this.props.setContent(contentState);\r\n  };\r\n\r\n  render() {\r\n    const { editorState } = this.state;\r\n\r\n    let contentState = stateToHTML(this.state.editorState.getCurrentContent());\r\n    this.props.setContent(contentState);\r\n\r\n    // const currentBlockKey = this.state.editorState.getSelection().getStartKey();\r\n    // const currentBlockIndex = this.state.editorState\r\n    //   .getCurrentContent()\r\n    //   .getBlockMap()\r\n    //   .keySeq()\r\n    //   .findIndex((k) => k === currentBlockKey);\r\n    // console.log(currentBlockIndex);\r\n\r\n    // console.log(this.props.content);\r\n    return (\r\n      <div className=\"EditorContainer\">\r\n        <div className=\"editor\">\r\n          <Editor\r\n            editorState={editorState}\r\n            onEditorStateChange={this.onEditorStateChange}\r\n            placeholder=\"content\"\r\n            toolbar={{\r\n              options: [\r\n                \"blockType\",\r\n                \"fontSize\",\r\n                \"inline\",\r\n                \"list\",\r\n                \"textAlign\",\r\n                \"history\",\r\n                \"image\",\r\n              ],\r\n              list: { inDropdown: true },\r\n              textAlign: { inDropdown: false },\r\n              link: { inDropdown: true },\r\n              history: { inDropdown: false },\r\n              image: {\r\n                uploadCallback: uploadImageCallBack,\r\n                alt: { present: true, mandatory: true },\r\n              },\r\n            }}\r\n            wrapperClassName=\"wrapper_class\"\r\n            editorClassName=\"editor_class\"\r\n            toolbarClassName=\"toolbar_class\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContentEditor;\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA;;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,cAApC,QAA0D,UAA1D;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,oBAAT,QAAqC,QAArC;AACA,SAASC,WAAT,QAA4B,kBAA5B;;;AAEA,SAASC,mBAAT,CAA6BC,IAA7B,EAAmC;EACjC,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtC,MAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;IACAD,GAAG,CAACE,IAAJ,CAAS,MAAT,EAAiB,+BAAjB;IACAF,GAAG,CAACG,gBAAJ,CAAqB,eAArB,EAAsC,iBAAtC;IACA,MAAMC,IAAI,GAAG,IAAIC,QAAJ,EAAb;IACAD,IAAI,CAACE,MAAL,CAAY,OAAZ,EAAqBV,IAArB;IACAI,GAAG,CAACO,IAAJ,CAASH,IAAT;IACAJ,GAAG,CAACQ,gBAAJ,CAAqB,MAArB,EAA6B,MAAM;MACjC,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWX,GAAG,CAACY,YAAf,CAAjB;MACAd,OAAO,CAACW,QAAD,CAAP;IACD,CAHD;IAIAT,GAAG,CAACQ,gBAAJ,CAAqB,OAArB,EAA8B,MAAM;MAClC,MAAMK,KAAK,GAAGH,IAAI,CAACC,KAAL,CAAWX,GAAG,CAACY,YAAf,CAAd;MACAb,MAAM,CAACc,KAAD,CAAN;IACD,CAHD;EAID,CAfM,CAAP;AAgBD;;AAED,MAAMC,aAAN,SAA4B9B,SAA5B,CAAsC;EACpC+B,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN,EADiB,CAEjB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAlBiB,KAmCnBC,mBAnCmB,GAmCcC,WAAD,IAAiB;MAC/C;MACA,KAAKC,QAAL,CAAc;QACZD;MADY,CAAd;IAGD,CAxCkB;;IAAA,KA0EnBE,aA1EmB,GA0EH,MAAM;MACpB,IAAIC,YAAY,GAAG9B,WAAW,CAAC,KAAK+B,KAAL,CAAWJ,WAAX,CAAuBK,iBAAvB,EAAD,CAA9B;MACA,KAAKP,KAAL,CAAWQ,UAAX,CAAsBH,YAAtB;IACD,CA7EkB;;IAmBjB,IAAIH,YAAJ;;IACA,IAAI,KAAKF,KAAL,CAAWS,OAAX,CAAmBC,IAAnB,OAA8B,GAAlC,EAAuC;MACrC,MAAMC,aAAa,GAAGC,mBAAmB,CAACC,WAApB,CAAgC,KAAKb,KAAL,CAAWS,OAA3C,CAAtB;MACA,MAAMJ,YAAY,GAAGjC,YAAY,CAAC0C,oBAAb,CAAkCH,aAAlC,CAArB,CAFqC,CAGrC;;MACAT,YAAW,GAAG/B,WAAW,CAAC4C,iBAAZ,CAA8BV,YAA9B,CAAd;MACAH,YAAW,GAAG/B,WAAW,CAAC6C,cAAZ,CAA2Bd,YAA3B,CAAd;IACD,CAND,MAMO;MACLA,YAAW,GAAG/B,WAAW,CAAC8C,WAAZ,EAAd;IACD;;IAED,KAAKX,KAAL,GAAa;MACXJ,WAAW,EAAEA;IADF,CAAb;EAGD;;EA8CDgB,MAAM,GAAG;IACP,MAAM;MAAEhB;IAAF,IAAkB,KAAKI,KAA7B;IAEA,IAAID,YAAY,GAAG9B,WAAW,CAAC,KAAK+B,KAAL,CAAWJ,WAAX,CAAuBK,iBAAvB,EAAD,CAA9B;IACA,KAAKP,KAAL,CAAWQ,UAAX,CAAsBH,YAAtB,EAJO,CAMP;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;;IACA,oBACE;MAAK,SAAS,EAAC,iBAAf;MAAA,uBACE;QAAK,SAAS,EAAC,QAAf;QAAA,uBACE,QAAC,MAAD;UACE,WAAW,EAAEH,WADf;UAEE,mBAAmB,EAAE,KAAKD,mBAF5B;UAGE,WAAW,EAAC,SAHd;UAIE,OAAO,EAAE;YACPkB,OAAO,EAAE,CACP,WADO,EAEP,UAFO,EAGP,QAHO,EAIP,MAJO,EAKP,WALO,EAMP,SANO,EAOP,OAPO,CADF;YAUPC,IAAI,EAAE;cAAEC,UAAU,EAAE;YAAd,CAVC;YAWPC,SAAS,EAAE;cAAED,UAAU,EAAE;YAAd,CAXJ;YAYPE,IAAI,EAAE;cAAEF,UAAU,EAAE;YAAd,CAZC;YAaPG,OAAO,EAAE;cAAEH,UAAU,EAAE;YAAd,CAbF;YAcPI,KAAK,EAAE;cACLC,cAAc,EAAE/C,mBADX;cAELgD,GAAG,EAAE;gBAAEC,OAAO,EAAE,IAAX;gBAAiBC,SAAS,EAAE;cAA5B;YAFA;UAdA,CAJX;UAuBE,gBAAgB,EAAC,eAvBnB;UAwBE,eAAe,EAAC,cAxBlB;UAyBE,gBAAgB,EAAC;QAzBnB;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EAiCD;;AAhImC;;AAmItC,eAAe/B,aAAf"},"metadata":{},"sourceType":"module"}